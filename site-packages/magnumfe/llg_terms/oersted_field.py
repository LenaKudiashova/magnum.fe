# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-01-16

from __future__ import absolute_import 

from dolfin import *

from . import LLGTerm
from magnumfe import Constants, Mesher, WrappedMesh
import magnumfe.open_boundary as open_boundary

__all__ = ["OerstedField"]

class OerstedField(LLGTerm):

  def __init__(self, method = "transform", sample_size = None, order = 1):
    """
    Solves for the current induced Oersted field.

    *Arguments*
      method (:class:`string`)
        Method for the solution of the open-boundary problem.
        Possible Values are "Fredkin Koehler"/"FK" and "Shell Transform"/"ST"
      sample_size (:class:`[float]`)
        Tuple described the size of the sample. Usually this is taken from create_mesh.
      order (:class:`int`)
        The order of CG function used for the potential calculation.
    """

    if method in ("ST", "Shell Transform"):
      if sample_size == None: raise "sample_size must be provided for shell-transform method"

      self.solver = open_boundary.ShellTransform(
          lambda coeffs, v, state, measure: inner(coeffs[1], cross(coeffs[0], grad(v))) * state.dx('conducting', measure),
          sample_size,
          order
        )

    elif method in ("FK", "Fredkin Koehler"):
      self.solver = open_boundary.FredkinKoehler('conducting',
          lambda coeffs, v, n: - inner(coeffs[1], rot(coeffs[0])) * v * dx - inner(cross(coeffs[1], coeffs[0]), n) * v * ds
        )
    else:
      raise "Method not available."

  def form_term_rhs(self, state, w):
    return - Constant(Constants.gamma) \
           * inner(as_vector(self.calculate_field(state)), w)

  def calculate_field(self, state):
    """
    Calculate the Oersted-field for a given simulation state.

    *Arguments*
      state (:class:`State`)
        The simulation state
    """
    h_x = self.solver.calculate(state, state.j, Constant((1.0, 0.0, 0.0)))
    h_y = self.solver.calculate(state, state.j, Constant((0.0, 1.0, 0.0)))
    h_z = self.solver.calculate(state, state.j, Constant((0.0, 0.0, 1.0)))

    return [h_x, h_y, h_z]

  def field(self, state, x = None, lump = False):
    with Timer("Oersted Field"):
      return super(OerstedField, self).field(state, x, lump)
