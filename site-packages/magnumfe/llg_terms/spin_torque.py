# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-02-17

from __future__ import absolute_import 

from dolfin import *
from . import LLGTerm
from magnumfe import Constants, Timer

__all__ = ["SpinTorque"]

class SpinTorque(LLGTerm):

  def __init__(self):
    """
    This class represents the coupling of the magnetization with a spin
    polarized current. It requires the spin accumulation s to be set in the
    state. The spin accumulation s has to be prescribed in the state, either
    by direct integration with :class:`SpinDiffusion` or by equilibrium
    treatment with :class:`SpinAccumulationForCurrent` or
    :class:`SpinAccumulationForPotential`.

    *Required fields*
      s
        Spin accumulation

    *Required material parameters*
      c
        Spin diffusion coupling constant
    """
    pass

  def form_rhs(self, state, w):
    return Constant(Constants.gamma / Constants.mu0) * state.material.c * inner(state.s, w)

  def field(self, state, x = None, lump = True):
    with Timer("Spin Torque"):
      return super(SpinTorque, self).field(state, x, lump)
