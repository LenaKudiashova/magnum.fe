# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-01-16

from __future__ import absolute_import 

from dolfin import *
from . import LLGTerm
from magnumfe import Constants, Timer

__all__ = ["ExchangeField"]

class ExchangeField(LLGTerm):

  def __init__(self):
    """
    This class represents the micromagnetic exchange field.

    *Required material parameters*
      Aex
        Exchange constant
    """
    self._preconditionable = True

  def form_term_rhs(self, state, w):
    return self._f(state) * Dx(state.m[i],j) * Dx(w[i],j)

  def form_term_lhs(self, state, w, dt_v):
    return - self._f(state) * Dx(dt_v[i],j) * Dx(w[i],j)

  def _f(self, state):
    return Constant(-2.0 / state.scale**2 * Constants.gamma / Constants.mu0) \
           * state.material.Aex / state.material.ms

  def field(self, state, x = None, lump = False):
    with Timer("Exchange Field"):
      return super(ExchangeField, self).field(state, x, lump)
