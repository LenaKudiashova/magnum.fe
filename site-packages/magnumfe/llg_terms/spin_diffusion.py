from __future__ import absolute_import 
from dolfin import *

__all__ = ["SpinDiffusion"]

class SpinDiffusion:
  def __init__(self, mesh):
    pass
  
  def calculate(self, m, dt):
    # regions
    Omega = ???
    omega = ???

    # Functions Spaces ...
    VV   = m.function_space()

    s          = TrialFunction(VV)   # s_i+1
    zeta       = TestFunction(VV)    # zeta

    D0         = Constant(1.0)
    beta       = Constant(1.0)
    beta_prime = Constant(1.0)
    j          = Constant((1.0, 0.0, 0.0))

    s_prev = self.s            # s_i

    # zeta1 = s ; zeta2 = zeta

    s_diff = (s - s_prev) / dt # dt s_i+1

    pde = inner(s_diff, zeta) * dx(Omega) +                                                         \
        + D0 * inner(grad(s), grad(zeta)) * dx(Omega)                                               \ 
        - D0 * beta * beta_prime * inner(outer(m, nabla_grad(s) * m), nabla_grad(zeta)) * dx(omega) \
        + D0 * inner(s , zeta) * dx(Omega)                                                          \
        + D0 * inner(cross(s, m), zeta) * dx(omega)                                                 \
        - beta * inner(outer(m, j), nabla_grad(zeta)) * dx(omega)

    a, L = system(pde)
