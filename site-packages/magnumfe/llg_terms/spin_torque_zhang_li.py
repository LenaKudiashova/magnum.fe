# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-02-16

from __future__ import absolute_import 

from dolfin import *
from . import LLGTerm
from magnumfe import Constants, Timer

__all__ = ["SpinTorqueZhangLi"]

class SpinTorqueZhangLi(LLGTerm):

  preconditionable = True

  def __init__(self):
    """
    TODO

    *Required fields*
      m
        Spin accumulation
      j
        Electric current

    *Required material parameters*
      xi
        TODO
      b
        TODO
    """
    pass

  def form_rhs(self, state, w):
    mat = state.material
    #return Constant(Constants.gamma / Constants.mu0) * state.material.c * inner(state.s, w)
    k = Constant(1.0 / state.scale) * transpose(nabla_grad(state.m)) * state.j
    return mat.b * inner((cross(state.m, k) + mat.xi * k), w)

  def field(self, state, x = None, lump = False):
    with Timer("Spin Torque Zhang&Li"):
      return super(SpinTorqueZhangLi, self).field(state, x, lump)
