# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-01-16

from __future__ import absolute_import 

from dolfin import *
from . import LLGTerm
from magnumfe import Constants, Timer

__all__ = ["ExternalField"]

class ExternalField(LLGTerm):

  def __init__(self, field = Constant((0.0, 0.0, 0.0))):
    """
    This class represents a constant external field.

    *Arguments*
      field (:class:`dolfin.cpp.GenericFunction`)
        The external field (Constant, Function or Expression)
    """
    self._preconditionable = True
    self.set(field)

  def set(self, field):
    """
    Reset the external field.

    *Arguments*
      field (:class:`dolfin.cpp.GenericFunction`)
        The external field (Constant, Function or Expression)
    """
    if isinstance(field, Constant):
      self._field = field
    else:
      self._field = Constant(field)

  def form_term_rhs(self, state, w):
    return Constant(Constants.gamma) * inner(self._field, w)

  def field(self, state, x = None, lump = False):
    if x is None:
      return self._field
    else:
      x.zero()
      x.axpy(1.0, self._field.vector())
      return Function(state.VectorFunctionSpace(), x)
