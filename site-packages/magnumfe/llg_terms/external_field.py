# Copyright (C) 2011-2015 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2015-02-17

from __future__ import absolute_import 

from dolfin import *
from . import LLGTerm
from magnumfe import Constants, Timer

__all__ = ["ExternalField"]

class ExternalField(LLGTerm):

  preconditionable = True

  def __init__(self, h_ext = None):
    """
    This class represents an external field. The field value is either
    taken from state class or provided directly as argument. In the latter
    case the attribute state.h_ext is set accordingly.

    *Arguments*
      h_ext (:class:`dolfin.cpp.GenericFunction`)
        The external field (GenericFunction or lambda)
    """
    self._h_ext_value = h_ext

  def form_rhs(self, state, w):
    return Constant(Constants.gamma) * inner(self._h_ext(state), w)

  def field(self, state, x = None, lump = True):
    if x is None:
      return self._h_ext(state)
    else:
      x.zero()
      x.axpy(1.0, self._h_ext(state).vector())
      return Function(state.VectorFunctionSpace(), x)

  def _h_ext(self, state):
    if self._h_ext_value is not None:
      state.h_ext = self._h_ext_value
      self._h_ext_value = None

    return state.h_ext
