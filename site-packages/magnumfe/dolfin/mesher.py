from __future__ import absolute_import 
import magnumfe.cpp as cpp
from dolfin import Mesh
import numpy

__all__ = ["Mesher"]

class Mesher(cpp.Mesher):
  def create_cuboid(self, size, n):
    return super(Mesher, self).create_cuboid(
        numpy.array(size, dtype="d"),
        numpy.array(n, dtype="i")
    )

  def create_shell(self, d, **kwargs):
    margin      = kwargs.pop('margin', 0.0)
    n           = numpy.array(kwargs.pop('n', (0,0,0)), dtype="i")
    progression = kwargs.pop('progression', 1.0)

    return super(Mesher, self).create_shell(d, margin, n, progression)

  def mesh(self, scale = 1.0):
    mesh = Mesh()
    super(Mesher, self).mesh(mesh, scale)
    return mesh

  def get_sample_size(self, i=-1, **kwargs):
    scale = kwargs.pop('scale', 1.0)

    if i > 0:
      return super(Mesher, self).get_sample_size(i) * scale

    # return array if if no component is given
    size = []
    for i in range(3):
      size.append(super(Mesher, self).get_sample_size(i) * scale)

    return size

