"""This module defines as MetricMatrix class that manly consists of a static
method for the generation of expressions for the metric matrix used for the
stray-field transformation method."""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 
from dolfin import Expression
import os
import numpy
from ufl import TensorElement

__all__ = ["MetricMatrix"]

class MetricMatrix():
  """
  This class defines a static method for the creation of expressions of
  the metric matrix used for the stray-field transformation method.
  """

  @staticmethod
  def create_for_cube(size, coord, order=1):
    """
    Creates an expression for the metric matrix used for the cuboid
    transformation method for the stray-field calculation.

    *Arguments*
        size
            The size of the inner cuboid. This is used for the correct
            scaling of the tensor.
        coord
            The principal direction of transformation. For each shell
            patch this has to be chosen accordingly.
        order
            Order of transformation. Use 1 for P1 finite elements and
            2 for P>1 elements.
    """

    # Read cpp implementation from file
    filename = "%s/metric_matrix_cube_%d.cpp" % (os.path.dirname(__file__), order)
    code = open(filename, 'r').read()

    # Create Quadrature Element
    element = TensorElement("Quadrature", "tetrahedron", 5)

    # Initialize expression and set size and coord
    g = Expression(code, element=element)
    g.size_x = size[0]
    g.size_y = size[1]
    g.size_z = size[2]
    g.coord  = coord

    return g
