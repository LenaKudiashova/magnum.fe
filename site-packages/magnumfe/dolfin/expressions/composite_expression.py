# Copyright (C) 2011-2014 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2014-07-07

from __future__ import absolute_import 
from dolfin import Expression, Mesh, MeshFunction

__all__ = ["CompositeExpression"]

def CompositeExpression(domains, expressions):
  e = Expression('''
    class CompositeExpression : public Expression
    {
      public:
        std::shared_ptr<MeshFunction<std::size_t> > cell_data;
        std::map<std::size_t, std::shared_ptr<Expression> > expressions;

        CompositeExpression() : Expression(3) {}

        void add_expression(std::size_t domain, std::shared_ptr<Expression> expression) {
          expressions[domain] = expression;
        }

        void eval(Array<double>& values, const Array<double>& x, const ufc::cell& c) const {
          assert(cell_data);
          const Cell cell(*cell_data->mesh(), c.index);
          std::size_t domain = (*cell_data)[cell.index()];

          if (expressions.find(domain) == expressions.end()) {
            for (std::size_t i=0; i<values.size(); ++i) values[i] = 0.0;
          } 
          else {
            expressions.at(domain)->eval(values, x, c);
          }
        }
    };''')
  if isinstance(domains, Mesh):
    e.cell_data = MeshFunction('size_t', domains, 3, domains.domains())
  else:
    e.cell_data = domains

  for domain in expressions:
    e.add_expression(domain, expressions[domain])

  return e
