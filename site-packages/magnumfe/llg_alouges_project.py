# Copyright (C) 2011-2014 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2014-06-11

from __future__ import absolute_import 

import scipy
from magnumfe import DofAssembler, ScalarProductMatrix, Constants, NormalizedVector
from dolfin import *

import time

__all__ = ["LLGAlougesProject"]

class LLGAlougesProject(object):
  """
  Solver for the Landau-Lifshitz-Gilbert equation according to Alouges [1]. In this two-step algorithm :math:`\partial_t \\boldsymbol{m} = \\boldsymbol{v}` is computed as

  .. math::
      \int_\Omega ( \\alpha \\boldsymbol{v} + \\boldsymbol{m} \\times \\boldsymbol{v}) \cdot \\boldsymbol{w} \;\\text{d}\\boldsymbol{x}
      + \\frac{2 A_\\text{ex} \gamma}{\mu_0 M_\\text{s}} \int_\Omega \\nabla (\\boldsymbol{m} + \\frac{1}{2} k \\boldsymbol{v}) \cdot \\nabla \\boldsymbol{w} \;\\text{d}\\boldsymbol{x}
      + \gamma \int_\Omega \\boldsymbol{H}_\\text{eff} \cdot \\boldsymbol{w}\;\\text{d}\\boldsymbol{x}
      = 0 \quad \\forall \quad \\boldsymbol{w} \in T_{\\boldsymbol{m}}

  where both the trial and test functions are restricted to :math:`T_{\\boldsymbol{m}}` which is the tangent space of :math:`\\boldsymbol{m}` [2]. As suggested in [3] the exchange field is integrated implicitly whereas all other contributions to the effective field :math:`\\boldsymbol{H}_\\text{eff}` are integrated explicitly. This class implements the tangent-space restriction through a projection method

  .. math::
    (\\boldsymbol{I} - \\boldsymbol{B}^T \\boldsymbol{B}) \\boldsymbol{A} \\boldsymbol{v} = 
    (\\boldsymbol{I} - \\boldsymbol{B}^T \\boldsymbol{B}) \\boldsymbol{b}

  where :math:`\\boldsymbol{A}` and :math:`\\boldsymbol{b}` are the discretized bilinear and linear part of the weak formulation above and :math:`\\boldsymbol{B}` is a matrix that delivers the node-wise scalar product with :math:`\\boldsymbol{m}` if applied to a vector field (e.g. :math:`\\boldsymbol{v}`).

  The integration step itself is performed by application of a node-wise renormalization as proposed by Alouges in [1]:

  .. math::
    \\boldsymbol{m}_i(t+k) = \\frac{\\boldsymbol{m}_i(t) + k \\boldsymbol{v}_i}{|\\boldsymbol{m}_i(t) + k \\boldsymbol{v}_i|}

  **This class requires the Petsc Backend to be enabled.**

  References:
    [1] Alouges, F. (2008). A new finite element scheme for Landau-Lifchitz equations. Discrete Contin. Dyn. Syst. Ser. S, 1(2), 187-196.

    [2] Abert, C., Exl, L., Bruckner, F., Drews, A., & Suess, D. (2013). magnum. fe: A micromagnetic finite-element simulation code based on FEniCS. Journal of Magnetism and Magnetic Materials, 345, 29-35.

    [3] Goldenits, P., Hrkac, G., Praetorius, D., & Suess, D. (2012, February). An effective integrator for the Landau-Lifshitz-Gilbert equation. In Proceedings of Mathmod 2012 Conference.
  """

  def __init__(self, terms = [], scale=1.0):
    """
    Setup Solver.

    *Arguments*
        terms (:class:`LLGTerm`)
            Effective Field terms to be considered.
        scale (:class:`float`)
            The scaling of the model. Use 1e-9 if you use nanometers as length measure.
    """

    if not has_linear_algebra_backend("PETSc"):
      # TODO throw exception?
      pass

    self.terms = terms
    self.scale = scale

  def calculate_v(self, state, dt):
    """
    Calculate :math:`\\boldsymbol{v}` according to the algorithm introduced above.

    *Arguments*
        state (:class:`State`)
            The simulation state containing the magnetization configuration.
        dt (:class:`float`)
            The time-step size.
    """

    # Initialize mesh and function spaces
    VV = state.VectorFunctionSpace()
    VS = state.FunctionSpace()

    v  = TrialFunction(VV)
    w  = TestFunction(VV)

    #######################################################
    # Forms
    #######################################################
    f_ex  =  Constant(-2.0 / self.scale**2 * Constants.gamma / Constants.mu0) \
             * state.material.Aex / state.material.ms

    # Bilinear form
    a  = state.material.alpha * dot(v, w) * state.dx('magnetic')
    a += dot(cross(state.m, v), w) * state.dx('magnetic')                            # LLG
    a += Constant(-0.5 * dt) * f_ex * Dx(v[i],j) * Dx(w[i],j) * state.dx('magnetic') # Exchange

    # Linear form
    L  = f_ex * Dx(state.m[i],j) * Dx(w[i],j) * state.dx('magnetic')                 # Exchange
    for term in self.terms:                                                          # Additional Terms
      L += term.form_term_rhs(state, w) * state.dx('magnetic')
      a += term.form_term_lhs(state, w, Constant(0.5 * dt) * v) * state.dx('magnetic')

    #######################################################
    # Assembly
    #######################################################

    # System to solve:
    # (1 - B^t B) A x = (1 - B^t B) b

    class ProjectionOperator(LinearOperator):
      def __init__(self, A, B, u):
        LinearOperator.__init__(self, u.vector(), u.vector())
        self._A  = A
        self._B  = B

      def size(self):
        return self._A.size(0)

      def mult(self, x, y):
        self._B.transpmult(- self._B * self._A * x, y)
        y.axpy(1.0, self._A * x)

    t0 = time.time()

    A  = PETScMatrix()
    A  = assemble(a, tensor = A)
    B  = DofAssembler.assemble(ScalarProductMatrix(VS, VV, state.m))

    b = assemble(L)
    b.axpy(-1.0, B.transpmult(B*b))

    v = Function(VV)
    Op = ProjectionOperator(A, B, v)
    solve(Op, v.vector(), b, "gmres")

    print "LLG: %s" % (time.time() - t0)
    return v

  def step(self, state, dt):
    """
    Calculate :math:`\\boldsymbol{m}(t+\Delta t)` for a given timestep.

    *Arguments*
        state (:class:`State`)
            The magnetization configuration.
        dt (:class:`float`)
            The time-step size.
    """

    v = self.calculate_v(state, dt)
    # XXX find simpler way for the following
    state.m.vector().axpy(dt, v.vector())
    state.m.assign(Function(
        state.m.function_space(),
        DofAssembler.assemble(NormalizedVector(state.m.function_space(), state.m))
    ))
