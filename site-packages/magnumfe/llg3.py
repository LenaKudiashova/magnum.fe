"""This module defines an alternative class for the numerical integration of the LLG."""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 

from dolfin import *
from magnumfe import *

__all__ = ["LLG3"]

class LLG3:
  """
  This class defines methods for the numerical integration of the LLG. The
  effective field includes exchange, demagnetization and external field terms.

  As opposed to the LLG class here CBC.Block is used and the micromagnetic
  constraint is imposed only on the nodes.
  """

  def __init__(self, mesh, material, **kwargs):
    """
    Create a _LLG2_ object for a given mesh and material.

    *Arguments*
        mesh
            The mesh.
        material
            The material of the sample.
        scale
            The scaling of the model. Use 1e-9 if you use nanometers as length measure.
    """

    # parameters
    self.mesh         = mesh.with_shell
    self.wrapped_mesh = mesh
    self.material     = material
    self.scale        = kwargs.pop('scale', 1.0)
    self.demag_order  = kwargs.pop('demag_order', 1)

    # setup function spaces
    self.VV = VectorFunctionSpace(self.mesh, "CG", 1)
    self.VD = FunctionSpace(self.mesh, "CG", self.demag_order)
    #self.VD = FunctionSpace(self.mesh, "CR", self.demag_order)
    self.VL = FunctionSpace(self.mesh, "CG", 1)
    #self.V  = self.VV * self.VD * self.VL
    self.V  = MixedFunctionSpace([self.VV, self.VD, self.VL])

    # setup some stuff for the demag field
    sample_size = mesh.data['sample_size']
    transformation_order = 1 if (self.demag_order == 1) else 2
    self.gx = MetricMatrix.create_for_cube(sample_size, 0, transformation_order)
    self.gy = MetricMatrix.create_for_cube(sample_size, 1, transformation_order)
    self.gz = MetricMatrix.create_for_cube(sample_size, 2, transformation_order)
    
  def interpolate(self, expr):
    return interpolate(expr, self.VV)

  def calculate_dm(self, m, dt, **kwargs):
    """
    Calculate the dm for a given magnetization configuration and timestep
    by the semiimplicit method proposed by Alouge.

    *Arguments*
        m
            The magnetization configuration.
        dt
            The timestep.
        u_ext
            The external field.
    """

    # get optional parameters
    h_ext   = kwargs.pop('h_ext', None)

    # Test and Trial Functions
    (v, u, sigma) = TrialFunctions(self.V)
    (w1, w2, w3) = TestFunctions(self.V)

    #######################################################
    # Forms
    #######################################################
    f_ex = (- 2.0 * self.material.Aex * self.material.gamma) / \
           (Constants.mu0 * self.material.ms * self.scale**2)

    # Bilinear form
    a  = self.material.alpha * dot(v, w1) * dx(0) + dot(cross(m, v), w1) * dx(0)  # LLG
    a += - 0.5 * dt * f_ex * Dx(v[i],j) * Dx(w1[i],j) * dx(0)                     # Exchange
    a += self.material.ms * self.material.gamma * inner(grad(u), w1) * dx(0)      # Demag
    a += sigma * inner(m, w1) * dx(0)                                             # Lagrange Multipliers

    a += Dx(w2, i) * Dx(u, i)                * dx(0) + \
         Dx(w2, i) * Dx(u, i)                * dx(1) + \
         Dx(w2, i) * self.gx[i,j] * Dx(u, j) * dx(2) + \
         Dx(w2, i) * self.gy[i,j] * Dx(u, j) * dx(3) + \
         Dx(w2, i) * self.gz[i,j] * Dx(u, j) * dx(4)                              # Demag Field, Stiffness
    a += - 0.5 * dt * inner(v, grad(w2)) * dx(0)                                  # Demag Field, Implicit RHS

    a += inner(m, v) * w3 * dx(0)                                                 # Constraint
    

    # Linear form
    L  = f_ex * Dx(m[i],j) * Dx(w1[i],j) * dx(0)                                  # Exchange
    L += inner(m, grad(w2)) * dx(0)                                               # Demag Field
    #if (h_ext is not None):                                                      # External
    #  L += self.material.gamma * inner(h_ext, w1) * dx

    # Boundary condition for the demagnetization field
    bc = DirichletBC(self.V.sub(1), Constant(0.0), DomainBoundary())

    #######################################################
    # Solve the system
    #######################################################
    w = Function(self.V)

    (A, b) = assemble_system(a, L, bc)
    A.ident_zeros()
    solve(A, w.vector(), b, "lu")
    #solve(A, w.vector(), b, "gmres")

    (v, u, sigma) = w.split()
    dm = self.wrapped_mesh.cut(interpolate(v, self.VV))

    f = File("data3/demag.pvd")
    f << u
    
    return dm

  def step(self, m, dt, **kwargs):
    """
    Calculate m(t+dt) for a given m(t) and dt following the semiimplicit
    method proposed by Alouge.
    The effective field consists of the stray field and the exchange field.
    An optional external field can be passed as argument.

    *Arguments*
        m
            The magnetization configuration.
        dt
            The timestep.
        h_ext
            The external field.
    """

    h_ext = kwargs.pop('h_ext', None)

    dm  = self.calculate_dm(m, dt, h_ext=h_ext)
    m.vector().axpy(dt, dm.vector())

    return Function(self.VV, DofAssembler.assemble(NormalizedVector(self.VV, m)))
