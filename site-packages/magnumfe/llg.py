"""This module defines a class for the numerical integration of the LLG."""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 

import scipy
from dolfin import *
from block  import *
from block.algebraic import *
from block.iterative import *
from block.algebraic.trilinos import *
from block.dolfin_util import *
from magnumfe import *

import time

__all__ = ["LLG"]

class LLG:
  """
  This class defines methods for the numerical integration of the LLG. The
  effective field includes exchange, demagnetization and external field terms.
  """

  def __init__(self, terms = [], scale=1.0):
    """
    Create a _LLG_ object for a given mesh and material.

    *Arguments*
        terms
            Additional rhs terms to the LLG
        scale
            The scaling of the model. Use 1e-9 if you use nanometers as length measure.
    """

    self.terms = terms
    self.scale = scale

  def calculate_v(self, state, dt):
    """
    Calculate v for a given magnetization configuration and timestep
    by the semiimplicit method proposed by Alouge.

    *Arguments*
        state
            The magnetization configuration.
        dt
            The timestep.
    """

    # Initialize mesh and function spaces
    VV = state.VectorFunctionSpace()
    VS = state.FunctionSpace()

    v  = TrialFunction(VV)
    w  = TestFunction(VV)

    #######################################################
    # Forms
    #######################################################
    f_ex  =  Constant(-2.0 / self.scale**2 * Constants.gamma / Constants.mu0) \
             * state.material.Aex / state.material.ms

    # Bilinear form
    a  = state.material.alpha * dot(v, w) * state.dx('magnetic')
    a += dot(cross(state.m, v), w) * state.dx('magnetic')                            # LLG
    a += Constant(-0.5 * dt) * f_ex * Dx(v[i],j) * Dx(w[i],j) * state.dx('magnetic') # Exchange

    # Linear form
    L  = f_ex * Dx(state.m[i],j) * Dx(w[i],j) * state.dx('magnetic')                 # Exchange
    for term in self.terms:                                                          # Additional Terms
      L += term.form_term(state, w) * state.dx('magnetic')

    #######################################################
    # Assembly
    #######################################################

    # assemble llg
    t0 = time.time()
    A = assemble(a)
    A.ident_zeros()
    b = assemble(L)

    # assemble constraint
    B  = DofAssembler.assemble(ScalarProductMatrix(VS, VV, state.m))
    BT = DofAssembler.assemble(TransScalarProductMatrix(VS, VV, state.m))

    # assemble block matrix
    AA = block_mat([[A, BT],
                    [B, 0]])
    bb = block_vec([b, BT.create_vec()])

    Ap = DD_ILU(A)
    Bp = InvDiag(collapse(B*LumpedInvDiag(A)*BT))
    AAp = block_mat([[Ap, BT],
                     [0, -Bp]]).scheme('sgs')

    #######################################################
    # Solve the system
    #######################################################
    AAinv = BiCGStab(AA, precond=AAp, tolerance=1e-8/dt)
    u, foo = AAinv*bb

    v = Function(VV)
    v.vector()[:] = u

    print "LLG: %s" % (time.time() - t0)
    return v

  def step(self, state, dt):
    """
    Calculate m(t+dt) for a given m(t) and dt following the semiimplicit
    method proposed by Alouge.

    *Arguments*
        state
            The magnetization configuration.
        dt
            The timestep.
    """

    v = self.calculate_v(state, dt)
    # XXX find simpler way for the following
    state.m.vector().axpy(dt, v.vector())
    state.m.assign(Function(
        state.m.function_space(),
        DofAssembler.assemble(NormalizedVector(state.m.function_space(), state.m))
    ))
