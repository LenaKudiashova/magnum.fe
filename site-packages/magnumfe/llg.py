from __future__ import absolute_import 

import scipy
from dolfin import *
from block  import *
from block.algebraic import *
from block.iterative import *
from block.algebraic.trilinos import *
from block.dolfin_util import *
from magnumfe import *

import time

__all__ = ["LLG"]

class LLG:
  def __init__(self, mesh, material, **kwargs):
    self.mesh     = mesh
    self.material = material
    self.scale    = kwargs.pop('scale', 1.0)

    # setup function spaces
    self.VV = VectorFunctionSpace(self.mesh, "CG", 1, 3)
    self.VS = FunctionSpace(self.mesh, "CG", 1)

    # set demag field
    self.demag_field = DemagField(self.mesh, order=2)

  def calculate_dm(self, m, dt, **kwargs):
    u_demag = kwargs.pop('u_demag', None)
    h_ext   = kwargs.pop('h_ext', None)

    # Initialize mesh and function spaces
    v  = TrialFunction(self.VV)
    w  = TestFunction(self.VV)

    #######################################################
    # Forms
    #######################################################
    f_ex    = (- 2.0 / self.scale**2 * self.material.Aex * self.material.gamma) / \
              (Constants.mu0 * self.material.ms)

    # Bilinear form
    a  = self.material.alpha * dot(v, w) * dx + dot(cross(m, v), w) * dx # LLG
    a += - 0.5 * dt * f_ex * Dx(v[i],j) * Dx(w[i],j) * dx                # Exchange

    # Linear form
    L  = f_ex * Dx(m[i],j) * Dx(w[i],j) * dx
    if (u_demag != None):
      L += - self.material.ms * self.material.gamma * inner(grad(u_demag), w) * dx
    if (h_ext != None):
      L += self.material.gamma * inner(h_ext, w) * dx

    #######################################################
    # Assembly
    #######################################################

    # assemble llg
    t0 = time.time()
    A = assemble(a)
    b = assemble(L)

    # assemble constraint
    B  = DofAssembler.assemble(ScalarProductMatrix(self.VS, self.VV, m))
    BT = DofAssembler.assemble(TransScalarProductMatrix(self.VS, self.VV, m))

    # assemble block matrix
    AA = block_mat([[A, BT],
                    [B, 0]])
    bb = block_vec([b, BT.create_vec()])

    Ap = ILU(A)
    Bp = InvDiag(collapse(B*InvDiag(A)*BT))
    AAp = block_mat([[Ap, 0],
                     [0, Bp]])

    #######################################################
    # Solve the system
    #######################################################
    AAinv = LGMRES(AA, precond=AAp)
    u, foo = AAinv*bb

    dm = Function(self.VV)
    dm.vector()[:] = u
    print "LLG: %s" % (time.time() - t0)

    return dm

  def step(self, m, dt, **kwargs):
    h_ext = kwargs.pop('h_ext', None)

    u_demag = self.demag_field.calculate(m)
    dm      = self.calculate_dm(m, dt, u_demag=u_demag, h_ext=h_ext)
    m.vector().axpy(dt, dm.vector())

    return Function(self.VV, DofAssembler.assemble(NormalizedVector(self.VV, m)))
