"""This module defines a class for the numerical integration of the LLG."""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 

import scipy
from block import *
from block.iterative import LGMRES, BiCGStab, MinRes2
from block.algebraic.trilinos import DD_ILU, ML
from magnumfe import DofAssembler, ScalarProductMatrix, TransScalarProductMatrix, Constants, NormalizedVector
from dolfin import *

import time

__all__ = ["LLG2"]

class LLG2(object):
  """
  This class defines methods for the numerical integration of the LLG. The
  effective field includes exchange, demagnetization and external field terms.
  """

  def __init__(self, terms = [], scale=1.0):
    """
    Create a _LLG_ object for a given mesh and material.

    *Arguments*
        terms
            Additional rhs terms to the LLG
        scale
            The scaling of the model. Use 1e-9 if you use nanometers as length measure.
    """

    self.terms = terms
    self.scale = scale

  def calculate_v(self, state, dt):
    """
    Calculate v for a given magnetization configuration and timestep
    by the semiimplicit method proposed by Alouge.

    *Arguments*
        state
            The magnetization configuration.
        dt
            The timestep.
    """

    # Initialize mesh and function spaces
    VV = state.VectorFunctionSpace()
    VS = state.FunctionSpace()

    v  = TrialFunction(VV)
    w  = TestFunction(VV)

    #######################################################
    # Forms
    #######################################################
    f_ex  =  Constant(-2.0 / self.scale**2 * Constants.gamma / Constants.mu0) \
             * state.material.Aex / state.material.ms

    # Bilinear form
    a  = state.material.alpha * dot(v, w) * state.dx('magnetic')
    a += dot(cross(state.m, v), w) * state.dx('magnetic')                            # LLG
    a += Constant(-0.5 * dt) * f_ex * Dx(v[i],j) * Dx(w[i],j) * state.dx('magnetic') # Exchange

    # Linear form
    L  = f_ex * Dx(state.m[i],j) * Dx(w[i],j) * state.dx('magnetic')                 # Exchange
    for term in self.terms:                                                          # Additional Terms
      L += term.form_term(state, w) * state.dx('magnetic')

    #######################################################
    # Assembly
    #######################################################

    # assemble llg
    t0 = time.time()
    A = PETScMatrix()
    A = assemble(a, tensor = A)
    b = assemble(L)

    B  = DofAssembler.assemble(ScalarProductMatrix(VS, VV, state.m))
    BT = DofAssembler.assemble(TransScalarProductMatrix(VS, VV, state.m))

    class MyOperator(LinearOperator):
      def __init__(self, A, B, BT, u):
        LinearOperator.__init__(self, u.vector(), u.vector())
        self._A  = A
        self._B  = B
        self._BT = BT

      def size(self):
        return self._A.size(0)

      def mult(self, x, y):
        y.zero() # TODO need this?
        y.axpy(1.0, self._A * x - self._BT * self._B * self._A * x)

    v = Function(VV)
    op = MyOperator(A, B, BT, v)

    solve(op, v.vector(), b-BT*B*b, "gmres")
    #solver = KrylovSolver("gmres", op)
    #solver.solve(v.vector(), b)

    #P  = 1 - BT*B
    #Ap = DD_ILU(A)
    #Ainv = LGMRES(P*A, precond=Ap, maxiter=1000)
    #result = Ainv*P*b
    #v = Function(VV, result)

    f = File("v2.pvd")
    f << v

    print "LLG: %s" % (time.time() - t0)
    return v

  def step(self, state, dt):
    """
    Calculate m(t+dt) for a given m(t) and dt following the semiimplicit
    method proposed by Alouge.

    *Arguments*
        state
            The magnetization configuration.
        dt
            The timestep.
    """

    v = self.calculate_v(state, dt)
    # XXX find simpler way for the following
    state.m.vector().axpy(dt, v.vector())
    state.m.assign(Function(
        state.m.function_space(),
        DofAssembler.assemble(NormalizedVector(state.m.function_space(), state.m))
    ))
