from magnumfe import *

__all__ = ["LLG2"]


class LLG2:
  def __init__(self, mesh, material, **kwargs):
    self.mesh     = mesh
    self.material = material
    self.scale    = 1e9

  def calculate_dm(self, m, dt, u_demag):
    # Mesh and Function Spaces
    #mesh = Box(-1.0, -1.0, -0.1, 1.0, 1.0, 0.1, 80, 80, 2)
    VV = VectorFunctionSpace(self.mesh, "CG", 1)
    VS = FunctionSpace(self.mesh, "CG", 1)
    V  = VV*VS

    # Test and Trial Functions
    (v, sigma) = TrialFunctions(V)
    (w, mu)    = TestFunctions(V)

    # Forms
    f_ex    = (- 2.0 * scale**2 * Aex * gamma) / (mu0 * ms)
    a_llg   = alpha * dot(v, w) * dx + dot(cross(m, v), w) * dx
    a_ex    = - 0.5 * dt * f_ex * Dx(v[i],j) * Dx(w[i],j) * dx
    L_ex    = f_ex * Dx(m[i],j) * Dx(w[i],j) * dx
    #L_ext   = gamma * inner(h_ext, w) * dx

    a_lagrange = mu * inner(m, v) * dx + sigma * inner(m, w) * dx

    a = a_llg + a_lagrange + a_ex
    L = L_ex #+ L_ext

    # Solve the system
    w = Function(V)
    #w.vector().zero()

    (A, b) = assemble_system(a, L)
    solve(A, w.vector(), b, "bicgstab", "ilu")

    for i in range(100):
      (A, b) = assemble_system(a, L)

      solve(A, w.vector(), b, "bicgstab", "ilu")
      #solver.solve(A, w.vector(), b)
      #solver.parameters["preconditioner"]["reuse"]
      (v, sigma) = w.split()

      dm = interpolate(v, VV)
      m.vector().axpy(dt, dm.vector())

      f = File("data/m_%03d.pvd" % i)
      f << m
