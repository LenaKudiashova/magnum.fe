"""This module defines an alternative class for the numerical integration of the LLG."""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 

from dolfin import *
from magnumfe import *

__all__ = ["LLG2"]

class LLG2:
  """
  This class defines methods for the numerical integration of the LLG. The
  effective field includes exchange, demagnetization and external field terms.

  As opposed to the LLG class the block structure of the saddle point problem
  ist ignored and the system is iteratively solved as is.
  """

  def __init__(self, mesh, material, scale=1.0, demag_order=2):
    """
    Create a _LLG2_ object for a given mesh and material.

    *Arguments*
        mesh
            The mesh.
        material
            The material of the sample.
        scale
            The scaling of the model. Use 1e-9 if you use nanometers as length measure.
        demag_order
            The order of the demagnetization field computation (1, 2, ...)
    """

    # parameters
    self.mesh        = mesh
    self.material    = material
    self.scale       = scale

    # setup function spaces
    self.VV = VectorFunctionSpace(self.mesh, "CG", 1)
    self.VS = FunctionSpace(self.mesh, "CG", 1)
    self.V  = self.VV*self.VS
    
    # setup demag field
    self.demag_field = DemagField(self.mesh, order=demag_order)

  def interpolate(self, expr):
    return interpolate(expr, self.VV)

  def calculate_dm(self, m, dt, u_demag=None, h_ext=None):
    """
    Calculate the dm for a given magnetization configuration and timestep
    by the semiimplicit method proposed by Alouge.

    *Arguments*
        m
            The magnetization configuration.
        dt
            The timestep.
        u_demag
            The scalar potential of the demag field.
        u_ext
            The external field.
    """

    # Test and Trial Functions
    (v, sigma) = TrialFunctions(self.V)
    (w, mu)    = TestFunctions(self.V)

    #######################################################
    # Forms
    #######################################################
    f_ex = (- 2.0 * self.material.Aex * self.material.gamma) / \
           (Constants.mu0 * self.material.ms * self.scale**2)

    # Bilinear form
    a  = Constant(self.material.alpha) * dot(v, w) * dx + dot(cross(m, v), w) * dx # LLG
    a += mu * inner(m, v) * dx + sigma * inner(m, w) * dx                          # Lagrange Multipliers
    a += - 0.5 * Constant(dt * f_ex) * Dx(v[i],j) * Dx(w[i],j) * dx                # Exchange

    # Linear form
    L  = Constant(f_ex) * Dx(m[i],j) * Dx(w[i],j) * dx                             # Exchange
    if (u_demag is not None):                                                      # Demag
      L += - Constant(self.material.ms * self.material.gamma) * inner(grad(u_demag), w) * dx
    if (h_ext is not None):                                                        # External
      L += Constant(self.material.gamma) * inner(h_ext, w) * dx

    #######################################################
    # Solve the system
    #######################################################
    w = Function(self.V)

    (A, b) = assemble_system(a, L)
    solve(A, w.vector(), b, "bicgstab", "ilu")

    (v, sigma) = w.split()
    dm = interpolate(v, self.VV)

    return dm

  def step(self, m, dt, h_ext=None):
    """
    Calculate m(t+dt) for a given m(t) and dt following the semiimplicit
    method proposed by Alouge.
    The effective field consists of the stray field and the exchange field.
    An optional external field can be passed as argument.

    *Arguments*
        m
            The magnetization configuration.
        dt
            The timestep.
        h_ext
            The external field.
    """

    u_demag = self.demag_field.calculate(m)
    dm      = self.calculate_dm(m, dt, u_demag=u_demag, h_ext=h_ext)
    m.vector().axpy(dt, dm.vector())

    return Function(self.VV, DofAssembler.assemble(NormalizedVector(self.VV, m)))
