from __future__ import absolute_import 

from dolfin import *
from magnumfe import *

__all__ = ["LLG2"]

class LLG2:
  def __init__(self, mesh, material, **kwargs):
    # parameters
    self.mesh     = mesh
    self.material = material

    # setup function spaces
    self.VV = VectorFunctionSpace(self.mesh, "CG", 1)
    self.VS = FunctionSpace(self.mesh, "CG", 1)
    self.V  = self.VV*self.VS
    
    # set demag field
    self.demag_field = DemagField(self.mesh, order=2)

  def calculate_dm(self, m, dt, u_demag, h_ext):
    # TODO interpolate m on self.VV ?
    # Test and Trial Functions
    (v, sigma) = TrialFunctions(self.V)
    (w, mu)    = TestFunctions(self.V)

    # Forms
    f_ex    = (- 2.0 * self.material.Aex * self.material.gamma) / \
              (Constants.mu0 * self.material.ms)
    a_llg   = self.material.alpha * dot(v, w) * dx + dot(cross(m, v), w) * dx
    a_ex    = - 0.5 * dt * f_ex * Dx(v[i],j) * Dx(w[i],j) * dx
    L_ex    = f_ex * Dx(m[i],j) * Dx(w[i],j) * dx
    L_st    = - self.material.ms *  self.material.gamma * inner(grad(u_demag), w) * dx
    L_ext   = self.material.gamma * inner(h_ext, w) * dx

    a_lagrange = mu * inner(m, v) * dx + sigma * inner(m, w) * dx

    a = a_llg + a_lagrange + a_ex
    L = L_ex + L_st + L_ext

    # Solve the system
    w = Function(self.V)
    #w.vector().zero()

    (A, b) = assemble_system(a, L)
    solve(A, w.vector(), b, "bicgstab", "ilu")

    (v, sigma) = w.split()
    dm = interpolate(v, self.VV)
    return dm

  def step(self, m, dt, **kwargs):
    h_ext = kwargs.pop('h_ext', Constant((0,0,0)))

    u_demag = self.demag_field.calculate(m)
    dm      = self.calculate_dm(m, dt, u_demag, h_ext)
    m.vector().axpy(dt, dm.vector())

    return Function(self.VV, DofAssembler.assemble(NormalizedVector(self.VV, m)))
