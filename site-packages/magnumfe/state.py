"""This module defines a simulation state"""

# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 

from dolfin import MeshFunction, Measure, FunctionSpace, VectorFunctionSpace, \
    Expression, Constant, interpolate

__all__ = ["State"]

class State:
  def __init__(self, mesh, regions = {1: 'magnetic'}, **kwargs):
    self.mesh    = mesh
    self.regions = regions
    #self.facets  = facets

    self.cell_domains  = MeshFunction('size_t', mesh, 3, mesh.domains())
    self.facet_domains = MeshFunction('size_t', mesh, 2, mesh.domains())

    self._dx = Measure('dx', mesh)[self.cell_domains]
    self._dS = Measure('dS', mesh)[self.facet_domains]

    self._VS = FunctionSpace(self.mesh, 'CG', 1) # TODO lazy initialize
    self._VV = VectorFunctionSpace(self.mesh, 'CG', 1, 3) # TODO lazy initialize

    for key, value in kwargs.iteritems():
      if isinstance(value, Expression) or isinstance(value, Constant):
        if value.rank() == 0:
          value = interpolate(value, self.FunctionSpace())
        elif value.rank() == 1:
          value = interpolate(value, self.VectorFunctionSpace())
        else:
          raise Exception("Not supported")

      setattr(self, key, value)

  def domain_ids(self, domain):
    if isinstance(domain, int):
      return [domain]

    domain_ids = []
    for domain_id, domain_name in self.regions.iteritems():
      if (domain[0] != '!' and domain_name == domain) or \
         (domain[0] == '!' and domain_name != domain[1:]):
        domain_ids.append(domain_id)

    return domain_ids

  def dx(self, domain, dx = None):
    domain_ids = self.domain_ids(domain)
    if len(domain_ids) == 0: return None

    if dx == None: dx = self._dx

    measure = dx(domain_ids[0])
    for domain_id in domain_ids[1:]:
      measure += dx(domain_id)

    return measure

  def VectorFunctionSpace(self):
    return self._VV

  def FunctionSpace(self):
    return self._VS
