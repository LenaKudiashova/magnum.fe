from __future__ import absolute_import 
import unittest
from dolfin import *
from magnumfe import *

class FunctionsTest(unittest.TestCase):

    def setUp(self):
      parameters['linear_algebra_backend'] = "Epetra"
      return

    def test_assemble_scalar_product(self):
      mesh = UnitCube(1, 1, 1)
      VV   = VectorFunctionSpace(mesh, "Lagrange", 1)
      VS   = FunctionSpace(mesh, "Lagrange", 1)

      v1 = Function(interpolate(Constant((1,2,3)), VV)).vector()
      v2 = Function(interpolate(Constant((2,3,4)), VV)).vector()

      A  = assemble_scalar_product(v1, VV, VS)

      v  = (A*v2)
      a  = v.array()
      print A.array()

      self.assertEqual(v.size(), v1.size() / 3)
      if v.owns_index(0):
        self.assertEqual(a[0], 20.0)


    #def test_assemble_transp_scalar_product(self):
    #  mesh = UnitCube(1, 1, 1)
    #  VV   = VectorFunctionSpace(mesh, "Lagrange", 1)
    #  VS   = FunctionSpace(mesh, "Lagrange", 1)

    #  v1 = Function(interpolate(Constant((1,2,3)), VV)).vector()
    #  v2 = Function(interpolate(Constant((2,3,4)), VV)).vector()

    #  A  = assemble_transp_scalar_product(v1, VV, VS)
    #  v = Function(VS).vector()
    #  A.transpmult(v2, v)
    #  a  = v.array()
    #  
    #  self.assertEqual(a[0], 20.0)
    #  self.assertEqual(v.size(), v1.size() / 3)

if __name__ == '__main__':
    unittest.main()
