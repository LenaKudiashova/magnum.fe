# Copyright (C) 2011-2014 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# Last modified by Claas Abert, 2014-06-10

from __future__ import absolute_import 

from dolfin import *

from magnumfe.dolfin import Mesher
from magnumfe.dolfin.expressions import MetricMatrix
from magnumfe.llg_terms import LLGTerm
from magnumfe.constants import Constants
from magnumfe import WrappedMesh

__all__ = ["ShellTransform"]

class ShellTransform():
  """
  Solver for open-boundary problems using the shell-transformation method.
  """

  def __init__(self, rhs_form, rhs_func, sample_size, order = 1):
    """
    *Arguments*
        rhs_form (:class:`lambda`)
            Lambda that returns the RHS part of the weak form.
        rhs_func (:class:`lambda`)
            Lambda that returns a vector valued function for the RHS.
        sample_size ([:class:`float`])
            Tuple described the size of the sample. Usually this is taken from create_mesh.
        order (:class:`int`)
            The order of CG function used for the potential calculation.
    """

    self.rhs_form    = rhs_form
    self.rhs_func    = rhs_func
    self.sample_size = sample_size
    self.order       = order

  def calculate(self, state):
    """
    Solve the open boundary problem for a given state.

    *Arguments*
        state (:math:`State`)
            The simulation state
    """
    class Cache(): pass
    if not hasattr(self, '_assemble_cache'):
      cache = self._assemble_cache = Cache()

      if isinstance(state.mesh, WrappedMesh):
        mesh = state.mesh.with_shell
        cell_domains  = MeshFunction('size_t', mesh, 3, mesh.domains())
        measure = Measure('dx', mesh)[cell_domains]
        VV = VectorFunctionSpace(mesh, 'CG', 1)
      else:
        mesh = state.mesh
        measure = None
        VV = state.VectorFunctionSpace()
  
      VS = FunctionSpace(mesh, 'CG', self.order)
  
      v = TestFunction(VS)
      u = TrialFunction(VS)
  
      transformation_order = 1 if (self.order == 1) else 2
      gx = MetricMatrix.create_for_cube(self.sample_size, 0, transformation_order)
      gy = MetricMatrix.create_for_cube(self.sample_size, 1, transformation_order)
      gz = MetricMatrix.create_for_cube(self.sample_size, 2, transformation_order)
  
      cache.rhs_func = Function(VV)
  
      a = inner(grad(v), grad(u))      * state.dx('all', measure) \
        + inner(grad(v), grad(u))      * state.dx(1000, measure) \
        + inner(grad(v), gx * grad(u)) * state.dx(1001, measure) \
        + inner(grad(v), gy * grad(u)) * state.dx(1002, measure) \
        + inner(grad(v), gz * grad(u)) * state.dx(1003, measure)
  
      L = self.rhs_form(cache.rhs_func, v, state, measure)
  
      cache.bc = DirichletBC(VS, Constant(0.0), DomainBoundary())
  
      cache.u = Function(VS)
  
      # set up assembler and solver objects
      cache.A, cache.b = Matrix(), Vector()
      cache.assembler = SystemAssembler(a, L, cache.bc)
      cache.assembler.assemble(cache.A)
  
      cache.solver = KrylovSolver(cache.A, "cg", "amg")
      cache.solver.parameters["nonzero_initial_guess"] = True
    else:
      # TODO perform sanity check
      cache = self._assemble_cache
  
    if isinstance(state.mesh, WrappedMesh):
      cache.rhs_func.assign(state.mesh.expand(self.rhs_func(state)))
    else:
      cache.rhs_func.assign(self.rhs_func(state))

    cache.assembler.assemble(cache.b)
    cache.solver.solve(cache.u.vector(), cache.b)

    if isinstance(state.mesh, WrappedMesh):
      return state.mesh.cut(cache.u)
    else:
      return cache.u
