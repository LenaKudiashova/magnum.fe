# Copyright (C) 2011-2012 Claas Abert
#
# This file is part of magnum.fe. 
#
# magnum.fe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.fe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
# 
# First added:  2012-11-30
# Last changed: 2012-11-30

from __future__ import absolute_import 
from dolfin import *
from magnumfe import Mesher, MetricMatrix, WrappedMesh

import time

__all__ = ["ExchangeField"]

class ExchangeField:
  def __init__(self, mesh, **kwargs):
    self.mesh  = mesh
    self.order = kwargs.pop('order', 1)

    self._assemble_cache = None

  ########################################
  # System matrix assembly
  ########################################
  def _assemble(self):
    if self._assemble_cache: return self._assemble_cache

    VV = FunctionSpace(self.mesh, "Lagrange", self.order)

    v = TestFunction(VV)
    u = TrialFunction(VV)

    a = v * u * dx
    A = assemble(a)
    # mass lump and invert

    Ainv = xxx

    self._assemble_cache = (Ainv, v)
    return self._assemble_cache

  def calculate(self, m):
    Ainv = self._assemble()
    return Ainv * m
