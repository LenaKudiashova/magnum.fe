// Copyright (C) 2011-2014 Claas Abert
//
// This file is part of magnum.fe.
//
// magnum.fe is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// magnum.fe is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with magnum.fe. If not, see <http://www.gnu.org/licenses/>.
//
// Last modified by Claas Abert, 2014-06-10

#include <string>
#include "DofForm.h"

using namespace magnumfe;

DofForm::DofForm(uint rank, uint num_coefficients)
  : _function_spaces(rank + num_coefficients), _coefficients(num_coefficients), _rank(rank)
{
  // Do nothing
}
//-----------------------------------------------------------------------------
DofForm::~DofForm()
{
  // Do nothing
}
//-----------------------------------------------------------------------------
unsigned int DofForm::rank() const
{
  return _rank;
}
//-----------------------------------------------------------------------------
uint DofForm::num_coefficients() const
{
  return _coefficients.size();
}
//-----------------------------------------------------------------------------
std::shared_ptr<const dolfin::FunctionSpace> DofForm::function_space(uint i) const
{
  dolfin_assert(i < _function_spaces.size());
  return _function_spaces[i];
}
//-----------------------------------------------------------------------------
std::vector<std::shared_ptr<const dolfin::FunctionSpace> > DofForm::function_spaces() const
{
  return _function_spaces;
}
//-----------------------------------------------------------------------------
void DofForm::set_coefficient(uint i,
                           std::shared_ptr<const dolfin::GenericFunction> coefficient)
{
  dolfin_assert(i < _coefficients.size());
  _coefficients[i] = coefficient;
}
//-----------------------------------------------------------------------------
void DofForm::set_coefficient(std::string name,
                           std::shared_ptr<const dolfin::GenericFunction> coefficient)
{
  set_coefficient(coefficient_number(name), coefficient);
}
//-----------------------------------------------------------------------------
void DofForm::set_coefficients(std::map<std::string, std::shared_ptr<const dolfin::GenericFunction> > coefficients)
{
  std::map<std::string, std::shared_ptr<const dolfin::GenericFunction> >::iterator it;
  for (it = coefficients.begin(); it != coefficients.end(); ++it)
    set_coefficient(it->first, it->second);
}
//-----------------------------------------------------------------------------
std::shared_ptr<const dolfin::GenericFunction> DofForm::coefficient(uint i) const
{
  dolfin_assert(i < _coefficients.size());
  return _coefficients[i];
}
//-----------------------------------------------------------------------------
std::shared_ptr<const dolfin::GenericFunction> DofForm::coefficient(std::string name) const
{
  return coefficient(coefficient_number(name));
}
//-----------------------------------------------------------------------------
std::vector<std::shared_ptr<const dolfin::GenericFunction> > DofForm::coefficients() const
{
  return _coefficients;
}
//-----------------------------------------------------------------------------
uint DofForm::coefficient_number(const std::string & name) const
{
  // NOT IMPLEMENTED
  // TODO: Dissect name, assuming "wi", and return i.
  return 0;
}
//-----------------------------------------------------------------------------
std::string DofForm::coefficient_name(uint i) const
{
  // Create name like "w0", overloaded by Form subclasses generated by form compilers
  std::ostringstream name;
  name << "w" << i;
  return name.str();
}

std::shared_ptr<const dolfin::Mesh> DofForm::mesh() const
{
  return function_space(0)->mesh();
}
